filename = "c:\temp\sensorreading.txt"


' ---------- SECTION: Motor Control ----------------------------------------------------------

' Some motors of the model  are grouped together to form a stronger,
' more accurate compound motor.  Throughout the program, these
' compound motors are referenced in commends with the letter A,B,C,D,E.
' When only one individual motor is meant, the daisy-chaining layer is prefixed
' (e.g. 1.C)
'  Motor A = 1.A
'  Motor B = 2.A + 2.B
'  Motor C = 1.C
'  Motor D = 2.C + 2.D
'  Motor E = 1.B + 1.D

' Global constants and variables or internal use of  library  (with initializers)
DAISY_TRANSMISSION_OVERHEAD = 1           ' minimum daisy chain transmission
AC_QUARTERTURN_TIME = 78 +1                 
AC_HALFTURN_TIME = 150 +1
AC_TWOSIDES_PENALTY = 7                    
BD_QUARTERTURN_TIME = 56 + 4              '  +transmission uncertainty
BD_HALFTURN_TIME = 100 + 4                '  +transmission uncertainty
BD_TWOSIDES_PENALTY = 5 
E_QUARTERTURN_TIME = 56  +1
E_HALFTURN_TIME = 100  +1

' face move actions                                     
Action_E1 = 1
Action_E2 = 2
Action_E3 = 3
Action_A0C1 = 4
Action_A0C2 = 5
Action_A0C3 = 6
Action_A1C0 = 7
Action_A1C1 = 8
Action_A1C2 = 9
Action_A1C3 = 10
Action_A2C0 = 11
Action_A2C1 = 12
Action_A2C2 = 13
Action_A2C3 = 14
Action_A3C0 = 15
Action_A3C1 = 16
Action_A3C2 = 17
Action_A3C3 = 18
Action_B0D1 = 19
Action_B0D2 = 20
Action_B0D3 = 21
Action_B1D0 = 22
Action_B1D1 = 23
Action_B1D2 = 24
Action_B1D3 = 25
Action_B2D0 = 26
Action_B2D1 = 27
Action_B2D2 = 28
Action_B2D3 = 29
Action_B3D0 = 30
Action_B3D1 = 31
Action_B3D2 = 32
Action_B3D3 = 33

moveendtime = -100000   		' system time when current move is finshed
lastusedaxis = -1               ' axis of currently running move 

' Initialize Hardware for MotorControl
' at end of init all motors are locked in place
Sub InitMotors
'  ' align gears of single-controlled motors to fit the cube orientation
'  Motor.StartPower("AC", 5)
  ' take up slack of compound motors E
  Motor.StartPower("B",-4)  
  Motor.StartPower("D",4)
  ' take up slack of compound motors B and D
  Motor.StartPower("2AC", 4)
  Motor.StartPower("2BD", -4)
  
  Program.Delay(200)
  
  ' lock in place
  Motor.SchedulePower("B", -50, 0,0,0, "true")
  Motor.SchedulePower("D", 50, 0,0,0, "true")
  Motor.SchedulePower("2AC",50, 0,0,0, "true")    
  Motor.SchedulePower("2BD",-50, 0,0,0, "true")    
  Motor.SchedulePower("AC",-10,0,0,0,"true")   
  
  Program.Delay(200)
EndSub

TuneMotors_Keys = ""
Sub TuneMotors
  If Text.IsSubText(TuneMotors_Keys, "E") Then
    Motor.SchedulePower("BD",30,0,1,0,"True")
  EndIf
  If Text.IsSubText(TuneMotors_Keys, "U") Then
    Motor.SchedulePower("A",30,0,1,0,"True")
  EndIf
  If Text.IsSubText(TuneMotors_Keys, "D") Then
    Motor.SchedulePower("C",30,0,1,0,"True")
  EndIf
  If Text.IsSubText(TuneMotors_Keys, "L") Then
    Motor.SchedulePower("2CD",30,0,1,0,"True")
  EndIf
  If Text.IsSubText(TuneMotors_Keys, "R") Then
    Motor.SchedulePower("2AB",30,0,1,0,"True")
  EndIf
EndSub

' Subprogram to turn faces on A-C axis   (axis 0)
MoveAC_a = 0    ' quarters to move A up
MoveAC_c = 0    ' quarters to move C up
Sub MoveAC
  ' when moving on same axis, give prevous move more time
  If lastusedaxis=0 Then  
    moveendtime = moveendtime + 200
  Endif  
  ' wait until previous turn has progressed far enough
  While EV3.Time < moveendtime
  EndWhile
  ' Memorize when the current move started 
  MoveAC_movestarttime = EV3.Time 
  ' End-Time defaults to timing of quarter turns only
  moveendtime = MoveAC_movestarttime + AC_QUARTERTURN_TIME
  ' Start the movement for A 
  If MoveAC_a=1 Then         '  quarter turn upwards 
    Motor.SchedulePower("1A", 100, 0, 90, 0, "true")
  ElseIf MoveAC_a=3 Then     ' quarter turn downwards
    Motor.SchedulePower("1A", -100, 0, 90, 0, "true")
  Elseif MoveAC_a=2 Then      ' half turn
    If MoveAC_c<>1 Then      ' default direction is upwards (ccw), if C is not upwards also
      Motor.SchedulePower("1A", 100, 0, 2*90, 0, "true")
    Else                           ' must move downwards (cw) if C was upwards to reduce overall tilt
      Motor.SchedulePower("1A", -100, 0, 2*90, 0, "true")
    Endif    
    moveendtime = MoveAC_movestarttime + AC_HALFTURN_TIME
  Endif
  ' Start the movement for C
  If MoveAC_c=1 Then         '  quarter turn upwards 
    Motor.SchedulePower("1C", -100, 0, 90, 0, "true")
  ElseIf MoveAC_c=3 Then     ' quarter turn downwards
    Motor.SchedulePower("1C", 100, 0, 90, 0, "true")
  Elseif MoveAC_c=2 Then      ' half turn
    If MoveAC_a<>3 Then      ' default direction is downwards (ccw), if a is not downwards also
      Motor.SchedulePower("1C", 100, 0, 2*90, 0, "true")
    Else                           ' must move upwards (cw) if a was downwards to reduce overall tilt
      Motor.SchedulePower("1C", -100, 0, 2*90, 0, "true")
    Endif    
    moveendtime = MoveAC_movestarttime + AC_HALFTURN_TIME
  Endif  
  ' check if must give penalty for two-sided move
  If MoveAC_a=2 And MoveAC_c=2 Then
    moveendtime = moveendtime + AC_TWOSIDES_PENALTY
  ElseIf (MoveAC_a=1 Or MoveAC_a=3) And (MoveAC_c=1 Or MoveAC_c=3) Then
    moveendtime = moveendtime + AC_TWOSIDES_PENALTY
  Endif
  ' memorize that this was the last axis that was moved
  lastusedaxis=0  
EndSub

' Subprogram to turn faces on B-D axis  (axis 1)
MoveBD_b = 0     ' quarters to move B right
MoveBD_d = 0     ' quarters to move D right
Sub MoveBD
  ' when moving on same axis, give prevous move more time
  If lastusedaxis=1 Then  
    moveendtime = moveendtime + 200
  Endif  
  ' wait until previous turn has progressed far enough  (considering transmission time)
  While EV3.Time < moveendtime - DAISY_TRANSMISSION_OVERHEAD
  EndWhile  
  ' Memorize when the current move started  (considering transmission time)
  MoveBD_movestarttime = EV3.Time + DAISY_TRANSMISSION_OVERHEAD  
  ' End-Time defaults to timing of quarter turns only
  moveendtime = MoveBD_movestarttime + BD_QUARTERTURN_TIME
  ' Start the movement for B 
  If MoveBD_b=1 Then         '  quarter turn right
    Motor.SchedulePower("2AB", 100, 0, 54, 0, "true")
  ElseIf MoveBD_b=3 Then     ' quarter turn left
    Motor.SchedulePower("2AB", -100, 0, 54, 0, "true")
  Elseif MoveBD_b=2 Then      ' half turn
    If MoveBD_d<>1 Then      ' default direction is right (ccw), if D is not right also
      Motor.SchedulePower("2AB", 100, 0, 2*54, 0, "true")
    Else                           ' must move left (cw) if D was right to reduce overall tilt
      Motor.SchedulePower("2AB", -100, 0, 2*54, 0, "true")
    Endif    
    moveendtime = MoveBD_movestarttime + BD_HALFTURN_TIME
  Endif
  ' Start the movement for D
  If MoveBD_d=1 Then         '  quarter turn right
    Motor.SchedulePower("2CD", -100, 0, 54, 0, "true")
  ElseIf MoveBD_d=3 Then     ' quarter turn left
    Motor.SchedulePower("2CD", 100, 0, 54, 0, "true")
  Elseif MoveBD_d=2 Then      ' half turn
    If MoveBD_b<>3 Then      ' default direction is left (ccw), if b is not left also
      Motor.SchedulePower("2CD", 100, 0, 2*54, 0, "true")
    Else                           ' must move upwards (cw) if a was downwards to reduce overall tilt
      Motor.SchedulePower("2CD", -100, 0, 2*54, 0, "true")
    Endif    
    moveendtime = MoveBD_movestarttime + BD_HALFTURN_TIME
  Endif  
  ' check if must give penalty for two-sided move
  If MoveBD_b=2 And MoveBD_d=2 Then
    moveendtime = moveendtime + BD_TWOSIDES_PENALTY
  ElseIf (MoveBD_b=1 Or MoveBD_b=3) And (MoveBD_d=1 Or MoveBD_d=3) Then
    moveendtime = moveendtime + BD_TWOSIDES_PENALTY
  Endif  
  ' memorize that this was the last axis that was moved
  lastusedaxis=1  
EndSub

' Subprogram to turn face on E axis  (axis 2)
MoveE_e = 0        ' quarters to move E clockwise
Sub MoveE   
  ' when moving on same axis, give prevous move more time 
  If lastusedaxis=2 Then  
    moveendtime = moveendtime + 200
  Endif  
  ' wait until previous turn has progressed far enough 
  While EV3.Time < moveendtime
  EndWhile
  ' Memorize when the current move started  (considering transmission time)
  MoveE_movestarttime = EV3.Time
  ' End-Time defaults to timing of quarter turns only
  moveendtime = MoveE_movestarttime + E_QUARTERTURN_TIME

  ' Start the movement for E 
  If MoveE_e=1 Then         '  quarter turn clockwise
    Motor.SchedulePower("1BD", -100, 0, 54, 0, "true")
  ElseIf MoveE_e=3 Then     ' quarter turn counter clockwise
    Motor.SchedulePower("1BD", 100, 0, 54, 0, "true")
  Elseif MoveE_e=2 Then      ' half turn clockwise
    Motor.SchedulePower("1BD", -100, 0, 2*54, 0, "true")
    moveendtime = MoveE_movestarttime + E_HALFTURN_TIME
  Endif

  ' memorize that this was the last axis that was moved
  lastusedaxis=2        
EndSub

' Subprogram to perfrom one action on the physical cube
MotorAction_action = 0
Sub MotorAction
  If MotorAction_action>=Action_E1 And MotorAction_action<=Action_E3 Then
    MoveE_e = MotorAction_action-(Action_E1-1)
    MoveE()
  ElseIf MotorAction_action>=Action_A0C1 And MotorAction_action<=Action_A3C3 Then
    MoveAC_a = Math.Floor((MotorAction_action-(Action_A0C1-1)) / 4)    
    MoveAC_c = Math.Remainder(MotorAction_action-(Action_A0C1-1),4)    
    MoveAC()
  ElseIf MotorAction_action>=Action_B0D1 And MotorAction_action<=Action_B3D3 Then
    MoveBD_b = Math.Floor((MotorAction_action-(Action_B0D1-1)) / 4)    
    MoveBD_d = Math.Remainder(MotorAction_action-(Action_B0D1-1),4)    
    MoveBD()
  EndIf
EndSub

' Wait for the last motor movement to be finished
Sub WaitForMotorFinished
  While EV3.Time < moveendtime
  EndWhile  
EndSub



' I2C protocol tags
CMD_STARTSCAN0[0] = 128
CMD_STARTSCAN1[0] = 129
CMD_STARTSCAN2[0] = 130
CMD_GETSAMPLE[0]  = 131
CMD_GETCOLORS[0]  = 132


MODE=0
Sub DoScan
  TIMINGX = Vector.Init(8,-1)
  TIMING1 = Vector.Init(8,-1)
  TIMING2 = Vector.Init(8,-1)
  If MODE=1 Then
    TIMINGX[0] = 41
    TIMING1[1] = 33
    TIMING2[1] = 56
    TIMING1[2] = 33
    TIMING2[2] = 55
    TIMINGX[3] = 41
    TIMINGX[4] = 41
    TIMING1[5] = 36
    TIMING2[5] = 58
    TIMING1[6] = 33
    TIMING2[6] = 56
    TIMINGX[7] = 41
    SCANTIME = 60
  ElseIf Mode=0 Then
    TIMING1[0] = 33
    TIMING2[0] = 49
    TIMINGX[1] = 40
    TIMINGX[2] = 40
    TIMING1[3] = 32
    TIMING2[3] = 47
    TIMING1[4] = 34
    TIMING2[4] = 46
    TIMINGX[5] = 40
    TIMINGX[6] = 40
    TIMING1[7] = 33
    TIMING2[7] = 46
    SCANTIME = 50
  EndIf  
  
  If MODE=1 Then
    stopscantime = EV3.Time + 110
    EV3.QueueNextCommand()
    Motor.SchedulePower("AC", 100, 0,35,0, "false")
    dummy = Sensor.CommunicateI2C(1,4, 1,1, CMD_STARTSCAN1)

    While EV3.Time < stopscantime
      Program.Delay(1)
    EndWhile
    Motor.SchedulePower("AC", 100, 0,55,0, "true")
    
  ElseIf MODE=0 Then
    stopscantime = EV3.Time + 100
    EV3.QueueNextCommand()
    Motor.SchedulePower("2ABCD", 100, 0,24,0, "false")
    dummy = Sensor.CommunicateI2C(1,4, 1,1, CMD_STARTSCAN0)

    While EV3.Time < stopscantime
      Program.Delay(1)
    EndWhile
    Motor.SchedulePower("2ABCD", 100, 0,30,0, "true")    
  Else  
    CMD_STARTSCAN[1] = MODE
    dummy = Sensor.CommunicateI2C(1,4, 1,1, CMD_STARTSCAN2)
    Program.Delay(1)  
  EndIf  

  For s=0 To 7 
    x = 0
    GetSensorData()
    If TIMINGX[s]>0 Then
      x = TIMINGX[s]
      GetSensorData()
    EndIf
    If TIMING1[s]>0 Then
      x = TIMING1[s]
      GetSensorData()
    EndIf
    If TIMING2[s]>0 Then
      x = TIMING2[s]
      GetSensorData()
    EndIf  
  endfor  
EndSub

Sub GetSensorData
  CMD_GETSAMPLE[1] = x
  hs = Sensor.CommunicateI2C(1,4, 2,24, CMD_GETSAMPLE)
  
  File.AppendContents(filename, s+":"+hs[3*s]+":"+hs[3*s+1]+":"+hs[3*s+2])
EndSub


'  Main program  perform long series of scans to create  the calibration data

InitMotors()

TextWindow.WriteLine("Starting...")
For tries = 0 To 199
 For MODE=0 To 1
   DoScan()
   File.AppendContents(filename, "")
 EndFor
 
 If Math.Remainder(tries,3)=0 Then
    Program.Delay(300) 
    MoveBD_b = 1     
    MoveBD_d = 0
    MoveBD() 
 endif
 If Math.Remainder(tries,5)=0 Then
    Program.Delay(300) 
    MoveAC_a = 0     
    MoveAC_c = 1
    MoveAC() 
 endif 
 Program.Delay(200)
 MoveE_e = 1
 MoveE()   
 Program.Delay(300)
EndFor

Program.Delay(1000)

